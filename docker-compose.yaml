# Volumes for storing the data of Zeebe and Elasticsearch
volumes:
  zeebe:
  elastic:

# Network for internal communication between all services
networks:
  camunda:

services:
  # Zeebe for executing BPMN processes
  zeebe:
    image: camunda/zeebe:8.4.0
    container_name: zeebe
    # Save the cluster data with a Docker volume
    volumes:
      - zeebe:/usr/local/zeebe/data
    environment:
      # Configure the Elasticsearch exporter
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME=io.camunda.zeebe.exporter.ElasticsearchExporter
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL=http://camunda-elasticsearch:9200
      # Set the heap size of the JVM to 512m
      - "JAVA_TOOL_OPTIONS=-Xms512m -Xmx512m"
    # Expose the gRPC port of Zeebe
    ports:
      - 26500:26500
    # Perform healthchecks by using the TCP connection
    healthcheck:
      test: [ "CMD-SHELL", "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9600' || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - camunda
    depends_on:
      - camunda-elasticsearch
    profiles:
      - camunda
    restart: unless-stopped

  # Operate for monitoring and debugging processes
  operate: 
    image: camunda/operate:8.4.0
    container_name: operate
    environment:
      # Configure the connection to Zeebe and Elasticsearch
      - CAMUNDA_OPERATE_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_OPERATE_ELASTICSEARCH_URL=http://camunda-elasticsearch:9200
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_URL=http://camunda-elasticsearch:9200
      # Configure the Spring Boot Actuator to allow healthchecks
      - management.endpoints.web.exposure.include=health
      - management.endpoint.health.probes.enabled=true
    # Expose the Operate web interface
    ports:
      - "8081:8080"
    # Use the Spring Boot Actuator for performing health checks
    healthcheck:
      test: [ "CMD-SHELL", "wget -O - -q 'http://localhost:8080/actuator/health/readiness'" ]
      interval: 30s
      timeout: 1s
      retries: 5
      start_period: 30s
    networks:
      - camunda
    depends_on:
      - zeebe
      - camunda-elasticsearch
    profiles:
      - camunda
    restart: unless-stopped

  # Elasticsearch for storing all process history data
  camunda-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    container_name: camunda-elasticsearch
    # Store the Elasticsearch data to a Docker volume
    volumes:
      - elastic:/usr/share/elasticsearch/data
    environment:
      # Configure to use a single-node cluster
      - discovery.type=single-node
      # Disable the security features
      - xpack.security.enabled=false
      # Allow running with low disk space
      - cluster.routing.allocation.disk.threshold_enabled=false
      # Set the JVM heap to 512m
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      # Lock the heap to avoid swapping
      - bootstrap.memory_lock=true
    # Allow locking unlimited amounts of memory
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # Expose the REST interface of Elasticsearch
    ports:
      - "9200:9200"
    # Use the health endpoint to perform healthchecks
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cat/health | grep -q green" ]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - camunda
    profiles:
      - camunda
    restart: unless-stopped
